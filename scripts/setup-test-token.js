// Script to deploy a test ERC20 token and add it to AIFi contracts
const { ethers } = require("hardhat");
const fs = require('fs');

// Simple ERC20 token for testing
const TEST_TOKEN_ABI = [
  "function name() view returns (string)",
  "function symbol() view returns (string)",
  "function decimals() view returns (uint8)",
  "function totalSupply() view returns (uint256)",
  "function balanceOf(address) view returns (uint256)",
  "function transfer(address to, uint amount) returns (bool)",
  "function approve(address spender, uint256 amount) returns (bool)"
];

// Token contract bytecode
const TOKEN_BYTECODE = "0x60806040526012600560006101000a81548160ff021916908360ff16021790555034801561002c57600080fd5b50604051806040016040528060038152602001624149466002815250600090805190602001906100d4929190610049565b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600560009054906101000a900460ff1660ff16600a620f4240620100009190620104d7565b826000816200011d9190620104d7565b9050919050565b82805461012e90620004d0565b90600052602060002090601f0160209004810192826101505760008555610197565b82601f1061016957805160ff1916838001178555610197565b82800160010185558215610197579182015b8281111561019657825182559160200191906001019061017b565b5b5090506101a491906101a8565b5090565b5b808211156101c15760008160009055506001016101a9565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61022e826101e5565b810181811067ffffffffffffffff8211171561024d5761024c6101f6565b5b80604052505050565b60006102606101c7565b905061026c8282610225565b919050565b600067ffffffffffffffff82111561028c5761028b6101f6565b5b610295826101e5565b9050602081019050919050565b82818337600083830152505050565b60006102c46102bf84610271565b610256565b9050828152602081018484840111156102e0576102df6101e0565b5b6102eb8482856102a2565b509392505050565b600082601f83011261030857610307610d23565b5b81516103188482602086016102b1565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061034c82610321565b9050919050565b61035c81610341565b811461036757600080fd5b50565b60008135905061037981610353565b92915050565b6000819050919050565b6103928161037f565b811461039d57600080fd5b50565b6000813590506103af81610389565b92915050565b60006103c08261037f565b9050919050565b6103d0816103b5565b81146103db57600080fd5b50565b6000813590506103ed816103c7565b92915050565b60006020828403121561040957610408610d46565b5b600082015167ffffffffffffffff81111561042757610426610d4b565b5b61043384828501610307565b91505092915050565b6000806040838503121561045357610452610d23565b5b60006104618582860161036a565b92505060206104728582860161039f565b9150509250929050565b6104858161037f565b82525050565b60006020820190506104a0600083018461047c565b92915050565b60008160011c9050919050565b6000808291508390505b60018511156104f7578086048111156104d3576104d2610321565b5b60018516156104e25780820291505b80810290506104f0856104a6565b94506104b7565b94509492505050565b600061050a6002836104b1565b915061051583610562565b9250600482111561053d5761053c600082815260208120601f198a9003812004909201916105dc565b5b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6105708161037f565b811461057b57600080fd5b50565b60008151905061058d81610567565b92915050565b600061059e8261037f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610570576105d0610544565b5b600182019050919050565b60006105e98235610593565b905092915050565b6000602082840312156106075761060661039f565b5b600061061584828501610589565b91505092915050565b600060ff82169050919050565b6000819050919050565b6000610651610619826104a6565b915060ff8211156106665761066561053d565b5b61067283620f4240565b905092915050565b600061068560618361037f565b915061069082610562565b92506106c46106628362041493e061067f565b915060018511156106eb576106ea600082815260208120601f198a9003812004909201916104ad565b5b5b5092915050565b60006106fe61061982610685565b915060ff8215156107c557600054811461072c576107c56107ba608082614e20856106d7565b915060085111156107505761074f6001840184610703565b5b50610769565b6001548414610769576107686107590183610593565b91506070612710610703565b5b60405180604001604052808484815260200183600054815260200150925092509250919050565b6000606082019050610b2660008301610bfd856108a58261080956b10156108c157600082815260208120601f198a9003812004909201916108a8565b5b5b5092915050565b60006108d760028361067f565b91506108e283610809565b9250600482111561090a57610909600082815260208120601f198a9003812004909201916108a5565b5b5b5092915050565b6000610922612710610ad1565b90506001546104ad565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff1614156109c4576109c3602060002054610d73565b5b565b60006109d48261037f565b91506109df8361037f565b9250826109ef576109ee61092f565b5b828204905092915050565b6000610a058261037f565b9150610a108361037f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a4957610a48610544565b5b828202905092915050565b6000610a5f8261037f565b9150610a6a8361037f565b925082610a7a57610a7961092f565b5b828204905092915050565b6000610b248261037f565b9150600082610b3457610b3361092f565b5b600182039050610b4a816104a656b9150841415610b6457610b63600082815260208120601f198a9003812004909201916104a9565b5b5b5092915050565b600081610b7a5761054461092f565b5b01905092915050565b600060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610be8926101f85761053d565b602060405180830381600087803b158015610c0257600080fd5b505af1158015610c16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3a91906106f7565b610c465760006105c061061c565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f5361666545524332303a204552433230207472616e7366657220666164652000815250602001915050604051809103902082610d1c565b6002815294505092915050565b6000610d2f82610844565b9150610d3a83610a54565b9250828110610d4d57610d4c610544565b5b828203905092915050565b6000610d5d8261037f565b9150610d688361037f565b9250828202610d7681610d24565b9150601482111561035c5761035b600082815260208120601f198a9003812004909201916104f0565b5b5b5092915050565b6000610daa8282610d52565b9150610db58361037f565b9250610dc08261037f565b915082820390505b92915050565b610dd7816109c9565b9150610de28361037f565b915060028204610df282610d9f565b915060018214610e1057610e0c600082815260208120601f198a9003812004909201916104f0565b50505b5092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e47578082015181840152602081019050610e2c565b83811115610e56576000848401525b50505050565b6000601f19601f8301169050919050565b6000610e7882610e13565b610e828185610e1e565b9350610e92818560208601610e2f565b610e9b81610e5c565b840191505092915050565b6000608082019050610ebb6000830187610e6d565b610ec8602083018661047c565b610ed5604083018561047c565b610ee2606083018461047c565b95945050505050565b600060ff82169050919050565b610f0281610eec565b82525050565b6000602082019050610f1d6000830184610ef9565b92915050565b6000604082019050610f386000830185610e6d565b610f45602083018461047c565b9392505050565b6000602082019050610f616000830184610e6d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f9282610f67565b9050919050565b610fa281610f87565b82525050565b6000602082019050610fbd6000830184610f99565b92915050565b610fcc81610f87565b8114610fd757600080fd5b50565b600081359050610fe981610fc3565b92915050565b6000602082840312156110055761100461053d565b5b600061101384828501610fda565b91505092915050565b61102581610eec565b811461103057600080fd5b50565b6000813590506110428161101c565b92915050565b6000602082840312156110605761105f61053d565b5b600061106e84828501611033565b91505092915050565b61108081610eec565b82525050565b600060208201905061109b6000830184611077565b92915050565b60006110ac82610eec565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156110df576110de610544565b5b600182019050919050565b60006060820190506110ff6000830186610e6d565b61110c6020830185611077565b611119604083018461107756b949350505050565b61112a8161037f565b82525050565b60006020820190506111456000830184611121565b92915050565b611154816103b5565b82525050565b600060208201905061116f600083018461114b565b92915050565b7f45524332303a207472616e7366657220616d6f756e7420657863656564732062600082015250565b60006111ab602883610e1e565b91506111b682611175565b604082019050919050565b600060208201905081810360008301526111da8161119e565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061123d602583610e1e565b9150611248826111e1565b604082019050919050565b6000602082019050818103600083015261126c81611230565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006112cf602483610e1e565b91506112da82611273565b604082019050919050565b600060208201905081810360008301526112fe816112c2565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611361602283610e1e565b915061136c82611305565b604082019050919050565b6000602082019050818103600083015261139081611354565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006113f3602383610e1e565b91506113fe82611397565b604082019050919050565b60006020820190508181036000830152611422816113e6565b9050919050565b7f45524332303a20617070726f76652073656e64657220697320746865207a657260008201527f6f20616464726573730000000000000000000000000000000000000000000000602082015250565b6000611485602d83610e1e565b915061149082611429565b604082019050919050565b600060208201905081810360008301526114b481611478565b9050919050565b60006114c682610f67565b9050919050565b6114d6816114bb565b82525050565b60006020820190506114f160008301846114cd565b92915050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320616000820152600060018201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b6000611553602883610e1e565b915061155e826114f7565b604082019050919050565b6000602082019050818103600083015261158281611546565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e636500000000000000000000000000000000000000000000000000000602082015250565b60006115e5602683610e1e565b91506115f082611589565b604082019050919050565b60006020820190508181036000830152611614816115d8565b9050919050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f742073756363656564000000000000000000000000000000000000000000000602082015250565b6000611677602a83610e1e565b91506116828261161b565b604082019050919050565b600060208201905081810360008301526116a68161166a565b9050919050565b7f54657374636f696e00000000000000000000000000000000000000000000000000815250565b60006116de600883610e1e565b91506116e9826116ae565b602082019050919050565b6000604051905081810181811067ffffffffffffffff8211171561171957611718825761053d565b5b8060405250919050565b600081905092915050565b600061173a82610e13565b6117448185611725565b9350611754818560208601610e2f565b80840191505092915050565b600061176c828561172f565b915061177882856117fd565b602082019150611788828461172f565b9150819050949350505050565b600061169c82600883610809565b91506117b58261180e565b915060088511156117dc576117db600082815260208120601f198a900381200490920191611760565b5b5b50979650505050505050565b60006117f5600283611760565b91506117f982611760565b9250600a8215611809576118096001840184611790565b5b5050565b600061181d60285b828202905092915050565b7f416946492054657374636f696e0000000000000000000000000000000000000000815250600060128261181356b82525050565b600061186d8261037f565b91506118788361037f565b9250818310156020835283828401116118975761188c9160ff8360ff1692611813565b6020835261185a565b5b50919050565b60006020820161d09f60008301876118b36000830184611862565b847f7472616e7366657228616464726573732c75696e7432353629000000000000008152506021810192505061d09f60002060010190508135151561190257611901600082815260208120601f198a9003812004909201916108af565b5b6001541015610a05578360ff16600a0a8302600181905550505050b60006000fd5b7f416966690000000000000000000000000000000000000000000000000000000082525060006003826118a8565b82525050565b6000606082019050611981600083018661194b565b61198e6020830185611077565b61199b6040830184611077565b949350505050565b600082905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000611a07602583610e1e565b9150611a12826119a1565b604082019050919050565b60006020820190508181036000830152611a36816119fa565b9050919050565b600082821015611a5257611a51610544565b5b82820390509291505056a7f2696eeede10ed4cc0cf0f0c73cb59e079fdd41ad7df92e0fe9c8772d1dd76f74736f6c63430008120033";

async function main() {
  try {
    // Load deployment info
    const deploymentInfo = JSON.parse(fs.readFileSync('./deployment-testnet.json', 'utf8'));
    console.log("Loaded deployment information from Rootstock Testnet");
    
    // Get contract addresses
    const lendingPoolAddress = deploymentInfo.contracts.AIFiLendingPool;
    const remittanceAddress = deploymentInfo.contracts.AIFiRemittance;
    
    console.log("Setting up a test token for AIFi contracts...");
    
    // Get signer
    const [deployer] = await ethers.getSigners();
    console.log(`Using account: ${deployer.address}`);
    
    // Deploy the AIFi test token
    console.log("\n--- Deploying AIFi Test Token (AIFI) ---");
    const factory = new ethers.ContractFactory(
      TEST_TOKEN_ABI,
      TOKEN_BYTECODE,
      deployer
    );
    
    const tokenContract = await factory.deploy();
    await tokenContract.deployed();
    console.log(`AIFi Test Token deployed to: ${tokenContract.address}`);
    
    // Check token details
    const tokenName = await tokenContract.name();
    const tokenSymbol = await tokenContract.symbol();
    const tokenDecimals = await tokenContract.decimals();
    const totalSupply = await tokenContract.totalSupply();
    
    console.log(`Token Name: ${tokenName}`);
    console.log(`Token Symbol: ${tokenSymbol}`);
    console.log(`Token Decimals: ${tokenDecimals}`);
    console.log(`Total Supply: ${ethers.utils.formatUnits(totalSupply, tokenDecimals)} ${tokenSymbol}`);
    
    // Get contract instances
    const AIFiLendingPool = await ethers.getContractFactory("AIFiLendingPool");
    const AIFiRemittance = await ethers.getContractFactory("AIFiRemittance");
    
    const lendingPool = AIFiLendingPool.attach(lendingPoolAddress);
    const remittance = AIFiRemittance.attach(remittanceAddress);
    
    // Add token to lending pool
    console.log("\n--- Adding token to AIFiLendingPool ---");
    const addTx1 = await lendingPool.addSupportedToken(tokenContract.address);
    await addTx1.wait();
    console.log(`Token added to AIFiLendingPool: ${addTx1.hash}`);
    
    // Add token to remittance
    console.log("\n--- Adding token to AIFiRemittance ---");
    const addTx2 = await remittance.addSupportedToken(tokenContract.address);
    await addTx2.wait();
    console.log(`Token added to AIFiRemittance: ${addTx2.hash}`);
    
    // Approve spending for contracts
    console.log("\n--- Approving contracts to spend tokens ---");
    const approveTx1 = await tokenContract.approve(
      lendingPoolAddress, 
      ethers.utils.parseUnits("1000000", tokenDecimals)
    );
    await approveTx1.wait();
    console.log(`LendingPool approval: ${approveTx1.hash}`);
    
    const approveTx2 = await tokenContract.approve(
      remittanceAddress,
      ethers.utils.parseUnits("1000000", tokenDecimals)
    );
    await approveTx2.wait();
    console.log(`Remittance approval: ${approveTx2.hash}`);
    
    console.log("\n--- Test Token Setup Complete ---");
    console.log(`Token Address: ${tokenContract.address}`);
    console.log(`Token Symbol: ${tokenSymbol}`);
    console.log("The test token has been added to both the lending pool and remittance contracts");
    console.log("You can now test deposits, borrowing, and remittances with this token");
    
    // Save token information
    const tokenInfo = {
      address: tokenContract.address,
      name: tokenName,
      symbol: tokenSymbol,
      decimals: tokenDecimals.toString(),
      deployedBy: deployer.address,
      timestamp: new Date().toISOString()
    };
    
    fs.writeFileSync(
      './test-token-info.json',
      JSON.stringify(tokenInfo, null, 2)
    );
    console.log("\nToken information saved to test-token-info.json");
    
    return tokenContract.address;
  } catch (error) {
    console.error("Setup failed with error:");
    console.error(error);
    process.exit(1);
  }
}

// Execute the script
if (require.main === module) {
  main()
    .then(() => process.exit(0))
    .catch(error => {
      console.error(error);
      process.exit(1);
    });
}

module.exports = main; 